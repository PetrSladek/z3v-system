<?php

namespace App\Forms;

use App\Forms\Base\BaseEntityForm;
use App\Model\Address;
use App\Model\Authenticator;
use App\Model\User;
use Kdyby\Doctrine\EntityManager;
use Nette;
use Nette\Application\UI\Form;
use Zend\Stdlib\Hydrator\HydratorInterface;

/**
 * Class UserPasswordForm
 * @package App\Forms
 * @property $entity User|null
 */
class UserPasswordForm extends BaseEntityForm
{

    /**
     * @var string Class name of entity
     */
    protected $entityClass = User::class;

    /**
     * @var Authenticator
     */
    protected $authenticator;


    public function __construct(Authenticator $authenticator, EntityManager $em, HydratorInterface $hydrator, $id)
    {
        parent::__construct($em, $hydrator, $id); // TODO: Change the autogenerated stub
        $this->authenticator = $authenticator;
    }


    /**
     * @return Form
     */
    protected function createComponentForm()
    {
        $frm = new Form;
        $frm->addPassword('old_password', 'Staré heslo:')
            ->setRequired()
            ->addRule(function(Nette\Forms\Controls\TextBase $control) {
                return $this->authenticator->verify($control->getValue(), $this->entity->getPassword());
            }, 'Staré heslo není zadané správně');
        $frm->addPassword('new_password', 'Nové heslo:')
            ->setRequired();
        $frm->addPassword('new_password_again', 'znovu nové heslo:')
            ->setOmitted()
            ->setRequired()
            ->addRule($frm::EQUAL, 'Hesla musí být stejná', $frm['new_password']);


        $frm->addSubmit('send', 'Změnit heslo');

        $frm->onSuccess[] = [$this, 'formSuccess'];

        return $frm;
    }

    protected function extract()
    {
        // nic do formu nedavame
    }


    protected function hydrate($values) {

        $this->entity->setPassword( $this->authenticator->hash( $values->new_password ) );
    }


}


interface IUserPasswordFormFactory
{
    /** @return UserPasswordForm */
    function create($id);
}