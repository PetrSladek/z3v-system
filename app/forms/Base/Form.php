<?php
/**
 * @project: z3v-system
 * @author: Petr SlÃ¡dek <petr.sladek@skaut.cz>
 */

namespace App\Forms\Base;

use Nette;
use Nette\Forms\Controls;

class Form extends Nette\Application\UI\Form
{

    public function __construct(Nette\ComponentModel\IContainer $parent = NULL, $name = NULL)
    {
        parent::__construct($parent = NULL, $name = NULL);

        // setup form rendering
        $renderer = $this->getRenderer();
        $renderer->wrappers['controls']['container'] = NULL;
        $renderer->wrappers['pair']['container'] = 'div class=form-group';
        $renderer->wrappers['pair']['.error'] = 'has-error';
        $renderer->wrappers['control']['container'] = 'div class=col-sm-8';
        $renderer->wrappers['label']['container'] = 'div class="col-sm-4 control-label"';
        $renderer->wrappers['control']['description'] = 'span class=help-block';
        $renderer->wrappers['control']['errorcontainer'] = 'span class=help-block';
        $renderer->wrappers['error']['container'] = 'div class="alert alert-danger"';
        $renderer->wrappers['error']['item'] = 'p';


        // make form and controls compatible with Twitter Bootstrap
        $this->getElementPrototype()->class('form-horizontal');
    }

    public function setAjax($ajax = true) {
        $this->getElementPrototype()->class('form-horizontal'.($ajax ? ' ajax' : null));
    }

    public function render()
    {
        foreach ($this->getControls() as $control) {
            if ($control instanceof Controls\Button) {
                $control->getControlPrototype()->addClass(empty($usedPrimary) ? 'btn btn-primary' : 'btn btn-default');
                $usedPrimary = true;
            } elseif ($control instanceof Controls\TextBase || $control instanceof Controls\SelectBox || $control instanceof Controls\MultiSelectBox) {
                $control->getControlPrototype()->addClass('form-control');

            } elseif ($control instanceof Controls\Checkbox || $control instanceof Controls\CheckboxList || $control instanceof Controls\RadioList) {
                $control->getSeparatorPrototype()->setName('div')->addClass($control->getControlPrototype()->type);
            }
        }

        parent::render(); // TODO: Change the autogenerated stub
    }



//    public function addGpsPicker($name, $caption = NULL, $options = array()) {
//        $driver = GpsPicker::DRIVER_GOOGLE;
//        $type = GpsPicker::TYPE_ROADMAP;
//
//        if (!isset($options['driver'])) {
//            $options['driver'] = $driver;
//        }
//        if (!isset($options['type'])) {
//            $options['type'] = $type;
//        }
//        return $this[$name] = new GpsPositionPicker($caption, $options);
//    }


    /**
     * Check for phone number validity
     *
     * @param string $phoneNumber Phone number to validate
     * @return boolean Validity is ok or not
     */
    static public function isPhoneNumber(Nette\Forms\IControl $item)
    {
        $phoneNumber = $item->getValue();
        return preg_match('/^[+0-9. ()-]*$/ui', $phoneNumber);
    }

}